<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWS.Logger.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:AWS.Logger.AspNetCore.AWSLogger">
            <summary>
            Implementation of the Microsoft.Extensions.Logging.ILogger.
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.AWSLogger.IncludeScopes">
            <summary>
            Prefix log messages with scopes created with ILogger.BeginScope
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.AWSLogger.IncludeLogLevel">
            <summary>
            Include log level in log message
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.AWSLogger.IncludeCategory">
            <summary>
            Include category in log message
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.AWSLogger.IncludeEventId">
            <summary>
            Include event id in log message
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.AWSLogger.IncludeNewline">
            <summary>
            Include new line in log message
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.AWSLogger.IncludeException">
            <summary>
            Include exception in log message
            </summary>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLogger.#ctor(System.String,AWS.Logger.Core.IAWSLoggerCore,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Construct an instance of AWSLogger
            </summary>
            <param name="categoryName">The category name for the logger which can be used for filtering.</param>
            <param name="core">The core logger that is used to send messages to AWS.</param>
            <param name="filter">Filter function that will only allow messages to be sent to AWS if it returns true. If the value is null all messages are sent.</param>
            <param name="customFormatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Test to see if the log level is enabled for logging. This is evaluated by running the filter function passed into the constructor.
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Log the message
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="T:AWS.Logger.AspNetCore.AWSLoggerProvider">
            <summary>
            Implementation of the ILoggerProvider which is used to create instances of ILogger.
            </summary>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.#ctor(AWS.Logger.AWSLoggerConfig,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Creates the logging provider with the configuration information to connect to AWS and how the messages should be sent.
            </summary>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.#ctor(AWS.Logger.AWSLoggerConfig,Microsoft.Extensions.Logging.LogLevel,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Creates the logging provider with the configuration information to connect to AWS and how the messages should be sent.
            </summary>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="minLevel">The minimum log level for messages to be written.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.#ctor(AWS.Logger.AWSLoggerConfig,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Creates the logging provider with the configuration information to connect to AWS and how the messages should be sent.
            </summary>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="filter">A filter function that has the logger category name and log level which can be used to filter messages being sent to AWS.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.#ctor(Microsoft.Extensions.Configuration.AWSLoggerConfigSection,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Creates the logging provider with the configuration section information to connect to AWS and how the messages should be sent. Also contains the LogLevel details
            </summary>
            <param name="configSection">Contains configuration on how to connect to AWS and how the log messages should be sent. Also contains the LogeLevel details based upon which the filter values would be set</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.#ctor(Microsoft.Extensions.Configuration.AWSLoggerConfigSection)">
            <summary>
            Creates the logging provider with the configuration section information to connect to AWS and how the messages should be sent. Also contains the LogLevel details
            </summary>
            <param name="configSection">Contains configuration on how to connect to AWS and how the log messages should be sent. Also contains the LogeLevel details based upon which the filter values would be set</param>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.CreateLogger(System.String)">
            <summary>
            Called by the ILoggerFactory to create an ILogger
            </summary>
            <param name="categoryName">The category name of the logger which can be used for filtering.</param>
            <returns></returns>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.Dispose">
            <summary>
            Disposes the provider.
            </summary>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.CreateLogLevelFilter(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Creates a simple filter based on a minimum log level.
            </summary>
            <param name="minLevel"></param>
            <returns></returns>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.CreateConfigSectionFilter(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Creates a filter based upon the prefix of the category name given to the logger
            </summary>
            <param name="logLevels">Contains the configuration details of the Log levels</param>
            <param name="categoryName">Identifier name that is given to a logger</param>
            <returns></returns>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.GetKeyPrefixes(System.String)">
            <summary>
            This method fetches the prefix name from the supplied category name of the logger. In case of no prefix match "Default" value is returned.
            </summary>
            <param name="name">The category name parameter given to a logger</param>
            <returns></returns>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.TryGetSwitch(System.String,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.LogLevel@)">
            <summary>
            This method gets the prefix name from the function CreateConfigSectionFilter and checks if there is a filter that matches.
            </summary>
            <param name="name">The prefix name supplied by the function CreateConfigSectionFilter. The filter matching operation would be based upon this supplied value. </param>
            <param name="logLevels">The Configuration section supplied by the user that deals with the logLevels.</param>
            <param name="level">The LogLevel that was found to be a match.</param>
            <returns></returns>
        </member>
        <member name="M:AWS.Logger.AspNetCore.AWSLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
            <inheritdoc />
        </member>
        <member name="T:AWS.Logger.AspNetCore.NullExternalScopeProvider">
            <summary>
            Scope provider that does nothing.
            </summary>
        </member>
        <member name="P:AWS.Logger.AspNetCore.NullExternalScopeProvider.Instance">
            <summary>
            Returns a cached instance of <see cref="T:AWS.Logger.AspNetCore.NullExternalScopeProvider"/>.
            </summary>
        </member>
        <member name="M:AWS.Logger.AspNetCore.NullExternalScopeProvider.Microsoft#Extensions#Logging#IExternalScopeProvider#ForEachScope``1(System.Action{System.Object,``0},``0)">
            <inheritdoc />
        </member>
        <member name="M:AWS.Logger.AspNetCore.NullExternalScopeProvider.Microsoft#Extensions#Logging#IExternalScopeProvider#Push(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions">
            <summary>
            ILoggingBuilder extensions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggingBuilder,AWS.Logger.AWSLoggerConfig,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Adds the AWS logging provider to the log builder using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="builder"></param>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.AWSLoggerConfigSection,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Adds the AWS logging provider to the log builder using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="builder"></param>
            <param name="configSection">Configuration and loglevels on how to connect to AWS and how the log messages should be sent.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggingBuilder,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Adds the AWS logging provider to the log builder by looking up configuration information from the IConfiguration added to the service collection.
            If configuration information can not be found then the AWS logging provider will not be added.
            </summary>
            <param name="builder"></param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggingBuilder,AWS.Logger.AWSLoggerConfig,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Adds the AWS logging provider to the log builder using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="builder"></param>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="minLevel">The minimum log level for messages to be written.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerBuilderExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggingBuilder,AWS.Logger.AWSLoggerConfig,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})">
            <summary>
            Adds the AWS logging provider to the log builder using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="builder"></param>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="filter">A filter function that has the logger category name and log level which can be used to filter messages being sent to AWS.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Logging.AWSLoggerFactoryExtensions">
            <summary>
            Extensions methods for ILoggerFactory to add the AWS logging provider
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerFactoryExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggerFactory,AWS.Logger.AWSLoggerConfig,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Adds the AWS logging provider to the log factory using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="factory"></param>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerFactoryExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.AWSLoggerConfigSection,System.Func{Microsoft.Extensions.Logging.LogLevel,System.Object,System.Exception,System.String})">
            <summary>
            Adds the AWS logging provider to the log factory using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="factory"></param>
            <param name="configSection">Configuration and loglevels on how to connect to AWS and how the log messages should be sent.</param>
            <param name="formatter">A custom formatter which accepts a LogLevel, a state, and an exception and returns the formatted log message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerFactoryExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggerFactory,AWS.Logger.AWSLoggerConfig,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Adds the AWS logging provider to the log factory using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="factory"></param>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="minLevel">The minimum log level for messages to be written.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.Logging.AWSLoggerFactoryExtensions.AddAWSProvider(Microsoft.Extensions.Logging.ILoggerFactory,AWS.Logger.AWSLoggerConfig,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})">
            <summary>
            Adds the AWS logging provider to the log factory using the configuration specified in the AWSLoggerConfig
            </summary>
            <param name="factory"></param>
            <param name="config">Configuration on how to connect to AWS and how the log messages should be sent.</param>
            <param name="filter">A filter function that has the logger category name and log level which can be used to filter messages being sent to AWS.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.ConfigurationSectionExtensions">
            <summary>
            Extensions methods for IConfiguration to lookup AWS logger configuration
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.ConfigurationSectionExtensions.GetAWSLoggingConfigSection(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Loads the AWS Logger Configuration from the ConfigSection
            </summary>
            <param name="configSection">ConfigSection</param>
            <param name="configSectionInfoBlockName">ConfigSection SubPath to load from</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.AWSLoggerConfigSection">
            <summary>
            This class stores the configuration section information to connect to AWS and how the messages should be sent and the LogLevel section details
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.Config">
            <summary>
            Configuration options for logging messages to AWS
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.LogLevels">
            <summary>
            Custom LogLevel Filters for <see cref="T:AWS.Logger.AspNetCore.AWSLoggerProvider"/>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.IncludeScopes">
            <summary>
            Gets the <see cref="P:AWS.Logger.AspNetCore.AWSLogger.IncludeScopes"/> property. This determines if scopes - if they exist - are included in a log message.
            <para>
            The default is false.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.IncludeLogLevel">
            <summary>
            Gets the <see cref="P:AWS.Logger.AspNetCore.AWSLogger.IncludeLogLevel"/> property. This determines if log level is included in a log message.
            <para>
            The default is true.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.IncludeCategory">
            <summary>
            Gets the <see cref="P:AWS.Logger.AspNetCore.AWSLogger.IncludeCategory"/> property. This determines if category is included in a log message.
            <para>
            The default is true.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.IncludeEventId">
            <summary>
            Gets the <see cref="P:AWS.Logger.AspNetCore.AWSLogger.IncludeEventId"/> property. This determines if event id is included in a log message.
            <para>
            The default is false.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.IncludeNewline">
            <summary>
            Gets the <see cref="P:AWS.Logger.AspNetCore.AWSLogger.IncludeNewline"/> property. This determines if a new line is added to the end of the log message.
            <para>
            The default is true.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.IncludeException">
            <summary>
            Gets the <see cref="P:AWS.Logger.AspNetCore.AWSLogger.IncludeException"/> property. This determines if exceptions are included in a log message.
            <para>
            The default is false.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.AWSLoggerConfigSection.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Construct an instance of AWSLoggerConfigSection
            </summary>
            <param name="loggerConfigSection">ConfigSection to parse</param>
        </member>
    </members>
</doc>
